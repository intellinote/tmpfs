// Generated by CoffeeScript 1.9.0
(function() {
  var Tmpfs, fs, mkdirp, os, path, remove, temp,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  path = require('path');

  fs = require('fs');

  os = require('os');

  temp = require('temp');

  mkdirp = require('mkdirp');

  remove = require('remove');

  Tmpfs = (function() {
    function Tmpfs(options) {
      var app_name, _ref, _ref1;
      if (options == null) {
        options = {};
      }
      this._on_exit = __bind(this._on_exit, this);
      this._mkdir = __bind(this._mkdir, this);
      this._rmdir = __bind(this._rmdir, this);
      this._rm = __bind(this._rm, this);
      this.cleanup_now = __bind(this.cleanup_now, this);
      this.make_temp_filename = __bind(this.make_temp_filename, this);
      app_name = (_ref = options.app_name) != null ? _ref : 'tmpfs';
      this.dir = (_ref1 = options.dir) != null ? _ref1 : path.join(os.tmpDir(), app_name + "-" + (Date.now()) + "-" + (Math.round(Math.random() * 10000)));
      if (options.mkdir !== false) {
        this._mkdir(this.dir);
      }
      if (options.cleanup_on_exit !== false) {
        this._on_exit((function(_this) {
          return function() {
            return _this.cleanup_now(false);
          };
        })(this));
      }
    }

    Tmpfs.prototype.make_temp_filename = function(options) {
      if (options == null) {
        options = {};
      }
      if (options.dir == null) {
        options.dir = this.dir;
      }
      return temp.path(options);
    };

    Tmpfs.prototype.cleanup_now = function(remake_dir) {
      if (remake_dir == null) {
        remake_dir = false;
      }
      _rmdir(this.dir);
      if (remake_dir) {
        return _mkdir(this.dir);
      }
    };

    Tmpfs.prototype._rm = function(file) {
      return fs.unlinkSync(file);
    };

    Tmpfs.prototype._rmdir = function(dir) {
      return remove.removeSync(dir);
    };

    Tmpfs.prototype._mkdir = function(dir) {
      return mkdirp.sync(dir);
    };

    Tmpfs.prototype._on_exit = function(callback) {
      process.on('cleanup', function() {
        return callback();
      });
      process.on('exit', function() {
        return process.emit('cleanup');
      });
      process.on('SIGINT', function() {
        return process.exit(2);
      });
      return process.on('uncaughtException', function(e) {
        console.log("uncaughtException", e, e.stack);
        return process.exit(99);
      });
    };

    return Tmpfs;

  })();

  exports.tmpfs = exports.Tmpfs = Tmpfs;

}).call(this);
